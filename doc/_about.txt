# Summary
basically, an automated world editor for defining and migrating player "bases".

Each player is assigned a color.  This is the color of wool the player must use when defining the boundary of the player's "base".
In phase 1, only ops (or possibly offline) will be able to place a base.

## placement logic:
	* bounded_space will be placed randomly within 256 of the worldspawn. #LATER:configurable
	* bounded_space will be placed randomly at least 48 from worldspawn. #LATER:configurable
	* bounded_space will not overlap another player's bounded_space.
	* bounded_space will be placed at the destiation's surface without modifing local terrain.

## Library/Plugin dependencies
	* Bukkit
	* WorldEdit
	* MultiVerse?
	* Schematic lib?

# Features (Phase 1)
	* permissions
		* urbase.use
		* urbase.woolcolor
		* urbase.allowed.srcworlds
		* urbase.allowed.dstworlds
	* commands
		* mark p1|p2
			* marks corners of a base boundary (where the player is standing)
		* place <playername> <world> <p1> <p2>
			* ops_only
			* checks cache for a PlayerBase owned by <playername> and places it by patching p1 and orients it towards p2
		* place <playername> <world>
			* ops_only
			* checks cache for a PlayerBase owned by <playername> and places it according to random params.
		* migrateall <srcworld> <dstworld>
			* ops_only
			* tries to find and move all PlayerBases defined by PlayerBaseBoundaryMarkers from <srcworld> to <destworld>
			* <srcworld> and <dstworld> are optional if their assoc defaults are set in configuration.
	* configuration
		* automatic migration
			* cornerblocks ideas
				* 1 cornerblock (Default=SpongeBlock, RC wants FencePost) <BLOCKID>
				* 2 cornerblocks (Default=WoodFence,NetherFence.  p1 and p2) <BLOCKID> <BLOCKID>
			* maximum searching distance from world spawn INT
			* minimum placement distance from world spawn INT
			* maximum placement distance from world spawn INT
			* minimum placement distance other PlayerBases INT
			* default source world STRING (world to scan for PlayerBaseBoundaryMarkers)
			* default destination world STRING (world to place PlayerBase in)
			* base cache schematics directory STRING (where to cache the PlayerBases to)
			* delete cached schematics on placement BOOL
	* automated migration
		1) player must define 2 corners using PlayerBaseBoundaryMarkers (of assigned color) or the /mark command
		* PlayerBaseBoundaryMarker is made of 4 blocks arranged in a 3x3x3 open-air:
			* a corner block(a rare block)
			* and, 1 colored WoolBlock along each axis in the direction the bounding_box should extend.
			* the color of wool is assoc with a player, or
		* the PlayerBaseBoundaryMarkers must be on opposite corners, and the inner space must point towards the other PlayerBaseBoundaryMarker.
		* borders of the bounding_box are inclusive, so the most narrow dimension is 3 blocks thick.
		* PlayerBaseBoundarys of different players cannot overlap
		* default max border dimension: 64.
		* only height 64Y to 128Y is copied to the new world. (for now)
		* PlayerBaseBoundaryMarkers only work in OVERWORLD. (for now)
		* check for a playerbed within the bounding_box, and which player is saved to that bed (aka player sleeppoint).
			* maybe detect player bed spawn point within the bounding box, and use that to assign player
		* save everything in the bounding_box as a schematic file. just in case.
		LATER: may want to make the corner block (the intersection) a commmand block that stores the player who set it.
			NOTE: could use a sponge (or other non-obtainable block to denote a corner)
		* MAYBE: wand and /mark command should create the assoc blocks (fence and wool) so the player can see the location

	* place structure:
		* places a save structure in a new world at a new location on the surface, and orientated in the same direction as the original.
		* randomize x,z based on a origin point (like a world spawn point) and a min-distance, and a max-distance
		* restore the palyer sleeppoint if one was saved with the structure.  check for valid spawn conditions. shift as needed
			* or set all player spawn to the world spawn, and they have to find their place. muh ha ha ha.


# Future Features

## LATER:0: Rail system
	* build rail system:
		need rail pattern (a cross-section of 1 lenght of rail.  minimum 1 rail on 1 cobblestone (the default)
			NOTE: matrix's cross section would need: 2 rails, 2 ironfence, 15 stone, and 1 redstone.  i don't know what to do about the repeaters that occure every ?7? blocks, or the lamp every ?8?.  that is a more complicated algorythm. maybe ...
			NOTE: on the lighting of the rails... could place a torch every 8 blocks (on the side, or center) or replace a redstone with a repeater every mod8-1, and a redstonelamp every mod8 blocks.
		rail paths may not pass thru player structures.
		3 blocks above each rail pattern placement are destroied.
		locate the placed structures, map out fewest-least-turn paths between structures.
		place junctions where needed along path. (these may have patterns in the future, but for now they are just what we have)
		allow assignment of "grand central"  (aka a spawn village)
			default: just find the structure nearest the spawn point and make it the center.
		save rail system paths
	* repair rail system:
		load the saved rail paths and rail patter, then rebuild the rail system based on those. (good to run 1/week just after a backup)


## LATER:1: improved base placing options
	* permissions
		* urbase.uses (reduced by 1 every time a base is placed, may be an abuse of permissions)
	* LATER:1: commands
		* LATER:1: moveto <world>
			* removes the marked base from current world (it gets saved in a server-side cache)
			* deletes the marks from the source world
		* LATER:1: place
			* requires player to to be standing in the destination world
			* requires player to mark p1 and p2 in the current world
			* places the "saved" base from cache to the marked area in the current world
			* destroys any blocks that are in the way
			* should give feedback if the marks do not align with the cached base

## LATER:2: schematica-like placing
	* Q: maybe even integration into Schematica?
		* LATER:2: rotate cw|ccw OR l|r OR left|right
			* rotates a placed base (like Schematica)
		* LATER:2: shift +/-x +/-y +/-z
			* moves a placed base in specified direction(s) (like Schematica)
		* LATER:2: finalize
			* locks the base in place.  this cannot be undone.

## LATER:3: 3D base borders
	* allow 3D bounding_cube (instead of just a column)
		* this will require a range to search within.  (3d-center and radius, or radius-per-dimension)
			* EX: worldspawn+128 (128 along each axis. NOTE: height is limited to 1y and worldmaxheight.
			* EX: worldspawn+512x+32y+256z (
				* if spawnpoint was at 0,64,0 it would search with-in a 3d-rectange bouded by: +512x,96,+256z  to  -512x,32y,-256z.
			* only scans previously generated chunks.

## LATER:4: Rail system monitor
	* scan world file:
		Q: is there a way to trigger an observer when a block is placed or destroyed?
			A:insted, use fs-snapshot to lock the world file, and the run the scan on it.  like doing a backup.
		scan the given world file (and assoc structure files ,etc...) chunk-by-chunk, and create an index of blocktype->[every x,y,z that block type appears at)
		NOTE: this will take a long time.

## NEVER: chest bank sync
		* easy enough for players to manually move these items.

################################
# OLD stuff
	PlayerBaseBoundaryMarker shcematic:
		layer 63		64		  65   (Y-height, points NE)
		  ...   .#.  ...
		  ...   .E#  .#.
		  ...   ...  ...
		where:
			.  is empty air
			#  is a woolblock of the color assigned to player
			E  is an EmeraldBlock
